<section class="content">
	<div class="panel">
		<div class="row">
			<div class="col-md-12">
				<div class="col-md-4 content-header">
					<h1>Projects</h1><br />
				</div>
				<div class="col-md-4 content-header">
				</div>
				<div class="col-md-3 content-header">
				</div>
				<div class="header-border"></div>
			</div>
			<div class="col-md-1"></div>
			<div class="col-md-5 pd-10">
        <%= form_for @project, url: project_update_path(@project), method: :put do |f| %>
        <div class="form-group">
          <%= f.label :name %>
          <%= f.text_field :name, placeholder: "Project Nane", class: "form-control", required: true %>
          <%= f.hidden_field :is_active, value: 1  %>
        </div>
        <div class="form-group">
        	<label for="tags2">Skills</label>
        	<input type="text" class="form-control tag-input-edit narrow" name="skill_tag" id="tags3" placeholder="Enter Skills" value="">
        </div>
        <div class="form-group">
          <%= f.label :description %>
          <%= f.text_area :description, placeholder: "Description", class: "form-control", required: true %>
        </div>
        <div class="form-group">
          <%= f.submit class: "btn btn-primary" %>
        </div>
        <%end%>
      </div>
		</div>
	</div>
</section>
<script type="text/javascript">

  $(function(){

      // Instantiate the Bloodhound suggestion engine
      var tags = new Bloodhound({
          datumTokenizer: function(d) { return Bloodhound.tokenizers.whitespace(d.tag); },
          queryTokenizer: Bloodhound.tokenizers.whitespace,
          local: [
            <% @skills.each do |skill| %>
              { tag: '<%= skill.name %>' },
            <%end%>
          ]
      });

      tags.initialize();

      // Set up an on-screen console for the demo
      var screenConsole = $('#console');

      // Write callback data to the screen when tags are added or removed in demo inputs
      var logCallbackDataToConsole = function(added, removed) {
        screenConsole.append('Tag Data: ' + (this.val() || null) + ', Added: ' + added + ', Removed: ' + removed + '\n');
      };

      // Create typeahead-enabled tag inputs
      $('.tag-input-edit').tagInput({
          allowDuplicates: false,
          typeahead: true,
          typeaheadOptions: {
            highlight: true
          },
          typeaheadDatasetOptions: {
            displayKey: 'tag',
            source: tags.ttAdapter()
          },
          onTagDataChanged: logCallbackDataToConsole
      });

      $('#results a[rel="external"]').attr('target', '_blank');

  });

</script>